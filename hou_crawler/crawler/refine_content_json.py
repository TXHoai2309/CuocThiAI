import json
import re
import os
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import NoSuchElementException
from webdriver_manager.chrome import ChromeDriverManager
import time

BASE_DIR = os.path.dirname(__file__)
INPUT_FILE = os.path.join(BASE_DIR, "data", "menu_contents.json")
OUTPUT_REFINED_FILE = os.path.join(BASE_DIR, "data", "menu_contents_refined.json")

# üëâ C·∫•u h√¨nh Selenium Chrome headless
options = Options()
options.add_argument('--headless')  # ·∫®n tr√¨nh duy·ªát (b·ªè d√≤ng n√†y n·∫øu mu·ªën hi·ªán)
options.add_argument('--no-sandbox')
options.add_argument('--disable-dev-shm-usage')
driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)

def extract_date(content):
    """Tr√≠ch xu·∫•t ng√†y t·ª´ n·ªôi dung n·∫øu c√≥ d·∫°ng dd/mm/yyyy"""
    match = re.search(r"\b(\d{2}/\d{2}/\d{4})\b", content)
    return match.group(1) if match else None

def get_full_content(url):
    """D√πng Selenium ƒë·ªÉ l·∫•y to√†n b·ªô n·ªôi dung, click n√∫t Read more n·∫øu c√≥"""
    try:
        driver.get(url)
        time.sleep(2)  # ch·ªù t·∫£i trang

        # Click n√∫t Read more ho·∫∑c Xem th√™m n·∫øu c√≥
        try:
            btn = driver.find_element(By.XPATH, "//a[contains(text(), 'Read more') or contains(text(), 'Xem th√™m')]")
            btn.click()
            time.sleep(1)
        except NoSuchElementException:
            pass

        # T√¨m div ch·ª©a n·ªôi dung ch√≠nh
        try:
            content_div = driver.find_element(By.CLASS_NAME, "single-content-full")
            return content_div.text.strip()
        except NoSuchElementException:
            return ""
    except Exception as e:
        print(f"‚ùå L·ªói l·∫•y n·ªôi dung {url}: {e}")
        return ""

def refine_json(input_path, output_path):
    with open(input_path, 'r', encoding='utf-8') as f:
        data = json.load(f)

    refined = []
    for i, item in enumerate(data):
        url = item.get("url", "")
        print(f"üîç ({i+1}/{len(data)}) ƒêang x·ª≠ l√Ω: {url}")

        content = get_full_content(url)
        if not content:
            continue

        # N·∫øu kh√¥ng c√≥ date, l·∫•y t·ª´ content
        date = item.get("date") or extract_date(content)

        refined.append({
            "title": item.get("title", ""),
            "url": url,
            "category": item.get("category", ""),
            "date": date,
            "content": content
        })

    with open(output_path, 'w', encoding='utf-8') as f:
        json.dump(refined, f, ensure_ascii=False, indent=2)

    print(f"‚úÖ ƒê√£ l∆∞u file ƒë√£ l·ªçc: {output_path} (T·ªïng {len(refined)} b√†i)")

if __name__ == "__main__":
    refine_json(INPUT_FILE, OUTPUT_REFINED_FILE)
    driver.quit()
